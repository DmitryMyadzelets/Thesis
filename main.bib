

@techreport{myadzelets_virtual_2013,
	type = {{arXiv} e-print},
	title = {Virtual Modules in Discrete-Event Systems: Achieving Modular Diagnosability},
	shorttitle = {Virtual Modules in Discrete-Event Systems},
	url = {http://arxiv.org/abs/1311.2850},
	institution = {Univercity of Bologna, CASY},
	number = {1311.2850},
	urldate = {2013-11-13},
	author = {Myadzelets, Dmitry and Paoli, Andrea},
	month = nov,
	year = {2013}
}

@article{lin_opacity_2011,
	title = {Opacity of discrete event systems and its applications},
	volume = {47},
	issn = {0005-1098},
	doi = {10.1016/j.automatica.2011.01.002},
	abstract = {In this paper, we investigate opacity of discrete event systems. We define two types of opacities: strong opacity and weak opacity. Given a general observation mapping, a language is strongly opaque if all strings in the language are confused with some strings in another language and it is weakly opaque if some strings in the language are confused with some strings in another language. We show that security and privacy of computer systems and communication protocols can be investigated in terms of opacity. In particular, two important properties in security and privacy, namely anonymity and secrecy, can be studied as special cases of opacity. We also show that by properly specifying the languages and the observation mapping, three important properties of discrete event systems, namely observability, diagnosability, and detectability, can all be reformulated as opacity. Thus, opacity has a wide range of applications. Also in this paper we provide algorithms for checking strong opacity and weak opacity for systems described by regular languages and having a generalized projection as the observation mapping.},
	number = {3},
	journal = {Automatica},
	author = {Lin, Feng},
	month = mar,
	year = {2011},
	keywords = {Anonymity, Detectability, diagnosability, Discrete event systems, observability, Opacity, Secrecy},
	pages = {496--503}
}

@inproceedings{moreira_polynomial_2010,
	title = {Polynomial time verification of decentralized diagnosability of discrete event systems},
	abstract = {Failure diagnosis is an important task in large complex systems and as such this problem has received in the last years considerable attention in the literature. The first step to diagnose failure occurrences in discrete event systems is the verification of the system diagnosability. Several works in the literature have addresses this problem using either diagnosers or verifiers for the centralized and decentralized architectures. In this paper a new polynomial time algorithm to verify the decentralized diagnosability property of a discrete event system is proposed. The algorithm has lower computational complexity than other methods proposed in the literature and can also be applied to the centralized case.},
	booktitle = {American Control Conference {(ACC)}, 2010},
	author = {Moreira, {M.V.} and Jesus, {T.C.} and Basilio, {J.C.}},
	month = jul,
	year = {2010},
	keywords = {computational complexity, decentralized diagnosability, discrete event system, Discrete event systems, failure diagnosis, large complex systems, large-scale systems, multivariable systems, polynomial time verification, system diagnosability verification},
	pages = {3353 --3358},
}
	
@inproceedings{sartini_methodology_2010,
	title = {A methodology for modular model-building in discrete automation},
	doi = {10.1109/ETFA.2010.5641244},
	abstract = {Our objective is to develop a general and versatile approach for building structured formal models of complex automated systems in order to facilitate their control and diagnosis. For this purpose, we present a methodology that builds the complete model of a system by composing models of the individual hardware components, their physical coupling, and the associated control logic. We choose to employ a hierarchical decomposition that separates the control logic into a high level that manages the sequence of control actions and a low level that implements the control actions. The low level is composed of control logic and physical components (sensors and actuators) grouped into a device. In order to capture the physical constraints between the components in a device, we propose the notion of a physical constraint automaton, which is composed with the generic component automata to generate the complete model of the device. We also show how the methodology allows the introduction of component faults into the overall model. The effectiveness of the proposed approach is demonstrated on a micro flexible manufacturing system.},
	booktitle = {2010 {IEEE} Conference on Emerging Technologies and Factory Automation {(ETFA)}},
	author = {Sartini, M. and Paoli, A. and Hill, {R.C.} and Lafortune, S.},
	month = sep,
	year = {2010},
	keywords = {complex automated systems, control logic, discrete automation, flexible manufacturing systems, industrial control, large-scale systems, micro flexible manufacturing system, modular model-building, physical constraint automation},
	pages = {1 --8}
}

@book{cassandras_introduction_2010,
	edition = {2nd ed. 2008},
	title = {Introduction to Discrete Event Systems},
	isbn = {1441941193},
	publisher = {Springer},
	author = {Cassandras, Christos G. and Lafortune, Stephane},
	month = oct,
	year = {2010}
}

@article{schumann_decentralised_2010,
	title = {A Decentralised Symbolic Diagnosis Approach},
	author = {Schumann, Anika and Pencolé, Yannick and Thiébaux, Sylvie},
	year = {2010}
}

@inproceedings{cassez_note_2009,
	title = {A note on fault diagnosis algorithms},
	doi = {10.1109/CDC.2009.5399968},
	abstract = {In this paper we review algorithms for checking diagnosability of discrete-event systems and timed automata. We point out that the diagnosability problems in both cases reduce to the emptiness problem for (timed) BuÃ‚Â¿chi automata. Moreover, it is known that, checking whether a discrete-event system is diagnosable, can also be reduced to checking bounded diagnosability. We establish a similar result for timed automata. We also provide a synthesis of the complexity results for the different fault diagnosis problems.},
	booktitle = {Proceedings of the 48th {IEEE} Conference on Decision and Control, 2009. {CDC} 2009},
	author = {Cassez, F.},
	month = dec,
	year = {2009},
	keywords = {automata theory, bounded diagnosability, diagnosability checking, Discrete event systems, discrete-event system, emptiness problem, fault diagnosis, fault diagnosis algorithm, observability, timed Buchi automata},
	pages = {6941 --6946},
}

@inproceedings{zhou_decentralized_2008,
	title = {Decentralized modular diagnosis of concurrent discrete event systems},
	doi = {10.1109/WODES.2008.4605977},
	abstract = {The problem of decentralized modular fault diagnosis of concurrent discrete event systems, that is composed of a set of component modules, is formulated and studied. In the proposed decentralized modular framework, diagnosis is performed by the local diagnosers, located at the component sites, using their own local observations. This is to ensure the scalability of the approach with respect to the number of component modules, and we require that the local diagnosers be ldquomodularly computablerdquo, i.e., their computation should be based on the local models, and not the global models. It is also required that there are no missed-detections (every fault is detected within a bounded number of transitions) and no false-alarms (a fault detection report is issued only when a fault has occurred). We formally define the decentralized modular diagnosis problem and introduce the notion of modular diagnosability as a key property for the existence of desired decentralized modular diagnosers. We show that under this property, the complexity for constructing the local diagnosers is polynomial in the number of local modules. We present a method for testing the modular diagnosability property by reducing it to an instance of a certain codiagnosability property for which known verification techniques exist.},
	booktitle = {9th International Workshop on Discrete Event Systems, 2008. {WODES} 2008},
	author = {Zhou, C. and Kumar, R. and Sreenivas, {R.S.}},
	month = may,
	year = {2008},
	keywords = {codiagnosability property, concurrent discrete event systems, decentralized modular fault diagnosis, Discrete event systems, fault diagnosis, modular computability, modular diagnosability},
	pages = {388 --393}
}

@article{wang_diagnosis_2007,
	title = {Diagnosis of Discrete Event Systems Using Decentralized Architectures},
	volume = {17},
	issn = {0924-6703},
	doi = {10.1007/s10626-006-0006-8},
	abstract = {Decentralized diagnosis of discrete event systems has received a lot of attention to deal with distributed systems or with systems that may be too large to be diagnosed by one centralized site. This paper casts the problem of decentralized diagnosis in a new hierarchical framework. A key feature is the exploitation of different local decisions together with appropriate rules for their fusion. This includes local diagnosis decisions that can be interpreted as “conditional decisions.” Under this new framework, a series of new decentralized architectures are defined and studied. The properties of their corresponding notions of decentralized diagnosability are characterized and their relationship with existing work described. Corresponding verification algorithms are also presented and on-line diagnosis strategies discussed.},
	number = {2},
	urldate = {2012-09-12},
	journal = {Discrete Event Dynamic Systems},
	author = {Wang, Yin and Yoo, Tae-Sic and Lafortune, Stéphane},
	year = {2007},
	keywords = {Mathematics and Statistics},
	pages = {233--263},
}

@article{qiu_decentralized_2006,
	title = {Decentralized failure diagnosis of discrete event systems},
	volume = {36},
	issn = {1083-4427},
	doi = {10.1109/TSMCA.2005.853503},
	abstract = {By decentralized diagnosis we mean diagnosis using multiple diagnosers, each possessing its own set of sensors, without involving any communication among diagnosers or to any coordinators. The notion of decentralized diagnosis is formalized by introducing the notion of codiagnosability that requires that a failure be detected by one of the diagnosers within a bounded delay. Algorithms of complexity polynomial in the size of the system and the nonfault specification are provided for: 1) testing codiagnosability, 2) computing the bound in delay of diagnosis, 3) offline synthesis of individual diagnosers, and 4) online diagnosis using them. The notion of codiagnosability and the above algorithms are initially presented in a setting of a specification language (violation of which represents a fault) and are later specialized to the case where faults are modeled as the occurrences of certain events. The notion of strong codiagnosability is also introduced to capture the ability of being certain about both the failure as well as the nonfailure conditions in a system within a bounded delay.},
	number = {2},
	journal = {{IEEE} Transactions on Systems, Man and Cybernetics, Part A: Systems and Humans},
	author = {Qiu, Wenbin and Kumar, R.},
	month = mar,
	year = {2006},
	keywords = {bounded delay, codiagnosability notion, complexity polynomial algorithms, decentralized failure diagnosis, delays, Discrete event systems, fault diagnosis, nonfault specification, polynomials, specification language},
	pages = {384 -- 395},
}

@article{contant_diagnosability_2006,
	 author = {Contant, Olivier and Lafortune, St{\'e}phane and Teneketzis, Demosthenis},
	 title = {Diagnosability of Discrete Event Systems with Modular Structure},
	 journal = {Discrete Event Dynamic Systems},
	 issue_date = {January 2006},
	 volume = {16},
	 number = {1},
	 month = jan,
	 year = {2006},
	 issn = {0924-6703},
	 pages = {9--37},
	 numpages = {29},
	 doi = {10.1007/s10626-006-6177-5},
	 acmid = {1117110},
	 publisher = {Kluwer Academic Publishers},
	 address = {Hingham, MA, USA},
	 keywords = {Common events, Diagnosability, Distributed systems, Modularity},
}

@article{su_global_2005,
	title = {Global and local consistencies in distributed fault diagnosis for discrete-event systems},
	volume = {50},
	issn = {0018-9286},
	doi = {10.1109/TAC.2005.860291},
	abstract = {In this paper, we present a unified framework for distributed diagnosis. We first introduce the concepts of global and local consistency in terms of supremal global and local supports, then present two distributed diagnosis problems based on them. After that, we provide algorithms to achieve supremal global and local supports respectively, and discuss in detail the advantages and disadvantages of each. Finally, we present an industrial example to demonstrate our distributed diagnosis approach.},
	number = {12},
	journal = {{IEEE} Transactions on Automatic Control},
	author = {Su, Rong and Wonham, {W.M.}},
	year = {2005},
	keywords = {Automata, Computer architecture, Computer Science, Concrete, Discrete event systems, discrete-event systems, distributed fault diagnosis, fault detection, fault diagnosis, global consistency, local consistency, local supports, Mathematics, Petri nets, Storage area networks, supremal global supports},
	pages = {1923--1935},
}

@article{pencole_formal_2005,
	title = {A formal framework for the decentralised diagnosis of large scale discrete event systems and its application to telecommunication networks},
	volume = {164},
	issn = {0004-3702},
	doi = {10.1016/j.artint.2005.01.002},
	abstract = {We address the problem of diagnosing large discrete event systems. Given a flow of observations from the system, the goal is to explain these observations on-line by identifying and localising possible failures and their consequences across the system. Model-based diagnosis approaches deal with this problem but, apart very recent proposals, either they require the computation of a global model of the system which is not possible with large discrete event systems, or they cannot perform on-line diagnosis. The contribution of this paper is the description and the implementation of a formal framework for the on-line decentralised diagnosis of such systems, framework which is based on the “divide and conquer” principle and does not require the global model computation. This paper finally describes the use of this framework in the monitoring of a real telecommunication network.},
	number = {1–2},
	urldate = {2013-04-22},
	journal = {Artificial Intelligence},
	author = {Pencolé, Yannick and Cordier, Marie-Odile},
	month = may,
	year = {2005},
	keywords = {decentralised model, Discrete event systems, distributed artificial intelligence, fault propagation, model-based diagnosis, telecommunication networks},
	pages = {121--170},
}

@inproceedings{yoo_event_2004,
	title = {Event diagnosis of discrete-event systems with uniformly and nonuniformly bounded diagnosis delays},
	volume = {6},
	abstract = {Various notions of diagnosability reported in literature deal with uniformly bounded finite detection or counting delays. The uniformity of delays can be relaxed while delays remain finite. We introduce various notions of diagnosability allowing nonuniformly bounded finite delays. A polynomial-time verification algorithm for diagnosability with nonuniformly bounded finite indefinite-counting delays is presented. A similar technique is applied to give a computationally better verification algorithm for diagnosability with uniformly bounded finite indefinite-counting delays than algorithms previously reported in literature. Finally, we develop a new on-line diagnosis algorithm that has a lower time and space complexity than on-line diagnosis algorithms reported in literature for counting the occurrence of repeated/intermittent faults.},
	booktitle = {American Control Conference, 2004. Proceedings of the 2004},
	author = {Yoo, T.-S. and Garcia, {H.E.}},
	month = jul,
	year = {2004},
	keywords = {delays, Discrete event systems, fault diagnosis, nonuniformly bounded finite indefinite counting delays, online diagnosis algorithm, polynomial time verification algorithm, polynomials, uniformly bounded finite detection, uniformly bounded finite indefinite counting delays},
	pages = {5102 --5107 vol.6},
}

@inproceedings{paoli_safe_2003,
	title = {Safe diagnosability of discrete event systems},
	volume = {3},
	doi = {10.1109/CDC.2003.1273025},
	abstract = {The problem of safe failure diagnosis in discrete event systems is addressed. Starting from the standard definition of diagnosability of discrete event systems, which deals with the problem of detecting the occurrence of an unobservable event using the available observations on the system, the problem of performing the detection before the system executes a forbidden string is introduced. For example, this constraint could be required to prevent local faults from developing into failures that could cause safety hazards. This idea results in a new language property for discrete event systems called safe diagnosability. Necessary and sufficient conditions to test this language property are presented. Moreover, the problem of explicitly taking into account safe diagnosability as a requirement in system design is discussed.},
	booktitle = {42nd {IEEE} Conference on Decision and Control, 2003. Proceedings},
	author = {Paoli, A. and Lafortune, S.},
	month = dec,
	year = {2003},
	keywords = {Automata, Discrete event systems, Event detection, fault detection, fault diagnosis, finite state machines, Hazards, Observers, Personnel, safe diagnosability, safe failure diagnosis, Safety, safety systems, Sufficient conditions, Testing},
	pages = {2658 -- 2664 Vol.3},
}

@inproceedings{su_distributed_2002,
	title = {Distributed diagnosis for qualitative systems},
	doi = {10.1109/WODES.2002.1167684},
	abstract = {In this paper we propose a novel automaton-based architecture to build a diagnoser, based on which an efficient distributed diagnostic method consisting of local computation and communication is presented. The method proposed here is highly scalable and robust to partial failures of the overall diagnoser.},
	booktitle = {Sixth International Workshop on Discrete Event Systems, 2002. Proceedings},
	author = {Su, R. and Wonham, {W.M.} and Kurien, J. and Koutsoukos, X.},
	year = {2002},
	keywords = {aircraft, Character generation, communication channel, Communication channels, computational complexity, Computer architecture, Computer crashes, Distributed computing, distributed diagnosis, fault diagnosis, finite automata, observability, printer, printers, qualitative diagnostic systems, Robustness, Scalability, simple paper-path system, space complexity, telecommunication channels, Time factors},
	pages = {169--174},
}

@inproceedings{garcia_centralized_2002,
	title = {Centralized modular diagnosis and the phenomenon of coupling},
	doi = {10.1109/WODES.2002.1167683},
	abstract = {This paper studies modular decomposition as an approach for failure diagnosis based on discrete event systems. This paper also analyses the problem of coupling produced in the implementation of centralized modular diagnosers, as coupled diagnosers cannot carry out their own diagnosis task when there is a failure in another subsystem sharing a common energy or material flow. In addition, we propose a method to avoid diagnoser coupling, by means of decoupling functions using nonlocal information with respect to the coupled diagnoser and generated in the diagnoser where the failure has been isolated.},
	booktitle = {Sixth International Workshop on Discrete Event Systems, 2002. Proceedings},
	author = {Garcia, E. and Morant, F. and Blasco-Gimenez, R. and Correcher, A. and Quiles, E.},
	year = {2002},
	keywords = {Aerodynamics, Chemical industry, complex systems, Condition monitoring, Control systems, coupling conditions, Discrete event systems, Distributed control, Face detection, failure analysis, fault diagnosis, finite state machine, finite state machines, large-scale systems, Manufacturing automation, modular decomposition, Production systems},
	pages = {161 -- 168},
}

@article{yoo_polynomial-time_2002,
	title = {Polynomial-time verification of diagnosability of partially observed discrete-event systems},
	volume = {47},
	issn = {0018-9286},
	doi = {10.1109/TAC.2002.802763},
	number = {9},
	journal = {{IEEE} Transactions on Automatic Control},
	author = {Yoo, Tae-Sic and Lafortune, S.},
	month = sep,
	year = {2002},
	keywords = {automata theory, computational complexity, diagnosability, Discrete event systems, failure diagnosis, fault diagnosis, finite state machines, finite-state automaton model, nondeterministic automaton, regular languages},
	pages = {1491 -- 1495},
}

@article{debouk_modular_2002,
	title = {A modular architecture for diagnosis of discrete event systems},
	doi = {10.1109/CDC.2002.1184530},
	month = {December},
	journal = {Proceedings of the 41st {IEEE} Conference on Decision and Control},
	author = {Debouk, Rami and Malik, Robi and Brandin, Bertil},
	year = {2002},
	pages = {417--422}
}

@article{jiang_polynomial_2001,
	title = {A polynomial algorithm for testing diagnosability of discrete-event systems},
	volume = {46},
	issn = {0018-9286},
	doi = {10.1109/9.940942},
	abstract = {Failure diagnosis in large and complex systems is a critical task. In the realm of discrete-event systems, Sampath et al. (1995) proposed a language based failure diagnosis approach. They introduced the diagnosability for discrete-event systems and gave a method for testing the diagnosability by first constructing a diagnoser for the system. The complexity of this method of testing diagnosability is exponential in the number of states of the system and doubly exponential in the number of failure types. We give an algorithm for testing diagnosability that does not construct a diagnoser for the system, and its complexity is of fourth order in the number of states of the system and linear in the number of the failure types},
	number = {8},
	journal = {{IEEE} Transactions on Automatic Control},
	author = {Jiang, Shengbing and Huang, Zhongdong and Chandra, V. and Kumar, R.},
	month = aug,
	year = {2001},
	keywords = {computational complexity, diagnosability testing, diagnoser, Discrete event systems, discrete-event systems, failure diagnosis, fault diagnosis, finite state machines, large-scale systems, polynomial algorithm},
	pages = {1318 --1321}
}

@inproceedings{debouk_coordinated_1998,
	title = {Coordinated decentralized protocols for failure diagnosis of discrete event systems},
	volume = {3},
	doi = {10.1109/ICSMC.1998.725122},
	abstract = {We address the problem of failure diagnosis in discrete event systems with decentralized information. We propose a coordinated decentralized architecture consisting of local sites communicating with a coordinator that is responsible for diagnosing the failures occurring in the system. We extend the notion of diagnosability, originally introduced in Sampath et al. (1995) for centralized systems, to the proposed coordinated decentralized architecture. We specify three protocols, i.e. the diagnostic information generated at the local sites, the communication rules used by the local sites, and the coordinator's decision rule, that realize the proposed architecture. We analyze the diagnostic properties of each protocol. We also state and prove necessary and sufficient conditions for a language to be diagnosable under each protocol. These conditions are checkable off-line. The online diagnostic process is carried out using the diagnosers introduced in the above article or a slight variation of these diagnosers. The key features of the proposed protocols are: (i) they achieve, each under a set of assumptions, the same diagnostic performance as the centralized diagnoser; and (ii) they highlight the performance vs. complexity tradeoff that arises in coordinated decentralized architectures. The correctness of two of the protocols relies on some stringent global ordering assumptions on message reception at the coordinator's site, the relaxation of which is briefly discussed},
	booktitle = {1998 {IEEE} International Conference on Systems, Man, and Cybernetics, 1998},
	author = {Debouk, R. and Lafortune, S. and Teneketzis, D.},
	year = {1998},
	keywords = {Ambient intelligence, communication rules, Computer aided manufacturing, Computer architecture, Computerized monitoring, Condition monitoring, Control systems, coordinated decentralized protocols, decentralized information, decision rule, Delay, diagnostic properties, Discrete event systems, Distributed control, failure diagnosis, fault diagnosis, global ordering, local sites, necessary and sufficient conditions, Observers, online diagnostic process, Protocols},
	pages = {3010--3011 vol.3},
	file = {Debouk et al. - 1998 - Coordinated decentralized protocols for failure di.pdf:E:\Documents and Settings\Dmitry\Application Data\Zotero\Zotero\Profiles\9j7amfwt.default\zotero\storage\PIDAUDZN\Debouk et al. - 1998 - Coordinated decentralized protocols for failure di.pdf:application/pdf;IEEE Xplore Abstract Record:E:\Documents and Settings\Dmitry\Application Data\Zotero\Zotero\Profiles\9j7amfwt.default\zotero\storage\XJMQPHSC\abs_all.html:text/html}
}

@article{sampath_diagnosability_1995,
	title = {Diagnosability of discrete-event systems},
	volume = {40},
	issn = {0018-9286},
	doi = {10.1109/9.412626},
	abstract = {Fault detection and isolation is a crucial and challenging task in the automatic control of large complex systems. We propose a discrete-event system {(DES)} approach to the problem of failure diagnosis. We introduce two related notions of diagnosability of {DES's} in the framework of formal languages and compare diagnosability with the related notions of observability and invertibility. We present a systematic procedure for detection and isolation of failure events using diagnosers and provide necessary and sufficient conditions for a language to be diagnosable. The diagnoser performs diagnostics using online observations of the system behavior; it is also used to state and verify off-line the necessary and sufficient conditions for diagnosability. These conditions are stated on the diagnoser or variations thereof. The approach to failure diagnosis presented in this paper is applicable to systems that fall naturally in the class of {DES's;} moreover, for the purpose of diagnosis, most continuous variable dynamic systems can be viewed as {DES's} at a higher level of abstraction},
	number = {9},
	journal = {{IEEE} Transactions on Automatic Control},
	author = {Sampath, M. and Sengupta, R. and Lafortune, S. and Sinnamohideen, K. and Teneketzis, D.},
	month = sep,
	year = {1995},
	keywords = {Analytical models, Automatic control, continuous variable dynamic systems, diagnosability, Diagnostic expert systems, Discrete event systems, discrete-event systems, Event detection, failure diagnosis, fault detection, fault diagnosis, fault isolation, Formal languages, Humans, invertibility, large complex systems, large-scale systems, Mathematical model, necessary and sufficient conditions, observability, Power system modeling, Sufficient conditions},
	pages = {1555--1575}
}

@article{tarjan_depth-first_1972,
	title = {Depth-First Search and Linear Graph Algorithms},
	volume = {1},
	doi = {10.1137/0201010},
	number = {2},
	urldate = {2012-06-05},
	journal = {{SIAM} Journal on Computing},
	author = {Tarjan, Robert},
	year = {1972},
	keywords = {Algorithm, backtracking, biconnectivity, connectivity, depth-first, graph, search, spanning tree, strong-connectivity},
	pages = {146--160}
}

@book{brualdi_introductory_2004,
	title = {Introductory Combinatorics},
	isbn = {9788131718827},
	language = {en},
	publisher = {Pearson Education},
	author = {Brualdi},
	year = {2004}
}

@article{aho_theory_1968,
	title = {The theory of languages},
	volume = {2},
	issn = {0025-5661, 1433-0490},
	url = {http://link.springer.com/article/10.1007/BF01692510},
	doi = {10.1007/BF01692510},
	language = {en},
	number = {2},
	urldate = {2014-02-07},
	journal = {Mathematical systems theory},
	author = {Aho, Alfred V. and Ullman, Jeffrey D.},
	month = jun,
	year = {1968},
	keywords = {Computational Mathematics and Numerical Analysis, Theory of Computation},
	pages = {97--125},
}


@book{hopcroft_introduction_2007,
	title = {Introduction to Automata Theory, Languages, and Computation},
	isbn = {9780321455369},
	abstract = {This classic book on formal languages, automata theory, and computational complexity has been updated to present theoretical concepts in a concise and straightforward manner with the increase of hands-on, practical applications. This new edition comes with Gradiance, an online assessment tool developed for computer science.  Gradiance is the most advanced online assessment tool developed for the computer science discipline. With its innovative underlying technology, Gradiance turns basic homework assignments and programming labs into an interactive learning experience for students. By using a series of "root questions" and hints, it not only tests a student's capability, but actually simulates a one-on-one teacher-student tutorial that allows for the student to more easily learn the material. Through the programming labs, instructors are capable of testing, tracking, and honing their students' skills, both in terms of syntax and semantics, with an unprecedented level of assessment never before offered.  For more information about Gradiance, please visit www.aw.com/gradiance.},
	language = {en},
	publisher = {{Pearson/Addison} Wesley},
	author = {Hopcroft, John E. and Motwani, Rajeev and Ullman, Jeffrey D.},
	year = {2007},
	keywords = {Computers / Computer Science}
}

@incollection{berezin_compositional_1998,
	series = {Lecture Notes in Computer Science},
	title = {Compositional Reasoning in Model Checking},
	copyright = {©1998 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-65493-3, 978-3-540-49213-9},
	url = {http://link.springer.com/chapter/10.1007/3-540-49213-5_4},
	abstract = {The main problem in model checking that prevents it from being used for verification of large systems is the state explosion problem. This problem often arises from combining parallel processes together. Many techniques have been proposed to overcome this difficulty and, thus, increase the size of the systems that model checkers can handle. We describe several compositional model checking techniques used in practice and show a few examples demonstrating their performance.},
	language = {en},
	number = {1536},
	urldate = {2014-02-07},
	booktitle = {Compositionality: The Significant Difference},
	publisher = {Springer Berlin Heidelberg},
	author = {Berezin, Sergey and Campos, Sérgio and Clarke, Edmund M.},
	editor = {Roever, Willem-Paul de and Langmaack, Hans and Pnueli, Amir},
	month = jan,
	year = {1998},
	keywords = {Artificial Intelligence (incl. Robotics), Logics and Meanings of Programs, Mathematical Logic and Formal Languages, software engineering},
	pages = {81--102},
}

@book{farrell_object-oriented_2013,
	address = {Boston, {MA}},
	title = {An object-oriented approach to programming logic and design},
	isbn = {9781133188223  1133188222},
	abstract = {This text takes a language independent approach to develop a foundation in traditional programming principles and object-oriented concepts before learning the details of a specific programming language. Includes programming exercises in every chapter, with review questions, debugging exercises and case projects.},
	language = {English},
	publisher = {Course {Technology/Cengage} Learning},
	author = {Farrell, Joyce},
	year = {2013}
}

@article{otto_iec_2009,
	title = {{IEC} 61131: A general overview and emerging trends},
	volume = {3},
	issn = {1932-4529},
	shorttitle = {{IEC} 61131},
	doi = {10.1109/MIE.2009.934793},
	abstract = {Programmable logic controller is the topic of this paper. For several decades, programmable logic controllers ({PLCs)} have been the most often used implementation platform for control algorithms in industrial applications. After their introduction in 1969, various companies developed {PLCs} with different run-time environments, operating systems, and programming languages. To reduce complexity for the users of {PLCs}, the International Electrotechnical Commission ({IEC)} elaborated the standard {IEC} 61131. {IEC} 61131-3 (published in 1992) specifies five {PLC} programming languages based on the existing programming languages but abstracting from proprietary peculiarities: the textual programming languages instruction list ({QV)} and structured text ({ST)}, the graphical programming languages function block diagram ({FBD)} and ladder diagram ({LD)}, and the structuring tool and higher level programming language sequential function chart ({SFC).} Although programmers had to get used to these languages first, they have now become a standard that is accepted and appreciated around the world, as it reduces training efforts and fosters harmonization. The integration of motion control and safety functions are discussed in this paper.},
	number = {4},
	journal = {{IEEE} Industrial Electronics Magazine},
	author = {Otto, A. and Hellmann, K.},
	month = dec,
	year = {2009},
	keywords = {Computer languages, Electrical equipment industry, function block diagram, {IEC} 61131-3 standard, {IEC} standards, industrial control, instruction list, ladder diagram, motion control, Operating systems, Programmable control, programmable controllers, programmable logic controllers, programming languages, Programming profession, Runtime environment, runtime environments, Safety, safety functions, sequential function chart, structured text},
	pages = {27--31}
}

@article{vyatkin_iec_2009,
	title = {The {IEC} 61499 standard and its semantics},
	volume = {3},
	issn = {1932-4529},
	doi = {10.1109/MIE.2009.934796},
	abstract = {The article is structured as follows. In the {"System-Level} Design for Distributed Automation" section, we give a general introduction to {IEC} 61499 in terms of its value for the automation systems developer. In the {"Elements} of {IEC} 61499 Architecture" section, the basic elements of the {IEC} 61499 architecture are presented using an illustrative example. The semantic problems of {IEC} 61499 are outlined in the {"Semantic} Problems of {IEC} 61499" section. The {"Semantics} of a Basic {FB"} section focuses on the problems and solutions related to the basic function block ({FB)} behavior. It is followed by the {"Semantics} of {FB} Networks" section that discusses semantic problems related to composite {FB} structures. In the "conclusions" section, we list some open problems.},
	number = {4},
	journal = {{IEEE} Industrial Electronics Magazine},
	author = {Vyatkin, V.},
	month = dec,
	year = {2009},
	keywords = {Automatic control, basic function block behavior, Communication system control, Computer languages, control engineering computing, Design automation, distributed automation system, distributed processing, Hardware, {IEC} 61499 architecture, {IEC} 61499 semantic problems, {IEC} 61499 standard, {IEC} standards, Logic design, Logic devices, {PLC} programming languages, Programmable control, programmable controllers, system-level design},
	pages = {40--48}
}

@inproceedings{mcumber_general_2001,
	title = {A general framework for formalizing {UML} with formal languages},
	doi = {10.1109/ICSE.2001.919116},
	abstract = {Informal and graphical modeling techniques enable developers to construct abstract representations of systems. Object-oriented modeling techniques further facilitate the development process. The Unified Modeling Language ({UML)}, an object-oriented modeling approach, could be broad enough in scope to represent a variety of domains and gain widespread use. Currently, {UML} comprises several different notations with no formal semantics attached to the individual diagrams. Therefore, it is not possible to apply rigorous automated analysis or to execute a {UML} model in order to test its behavior: short of writing code and performing exhaustive testing. We introduce a general framework for formalizing a subset of {UML} diagrams in terms of different formal languages based on a homomorphic mapping between meta models describing {UML} and the formal language. This framework enables the construction of a consistent set of rules for transforming {UML} models into specifications in the formal language. The resulting specifications derived from {UML} diagrams enable either execution through simulation or analysis through model checking, using existing tools. This paper describes the use of this framework for formalisms {UML} to model and analyze embedded systems. A prototype system for generating the formal specifications and results from an industrial case study are also described.},
	booktitle = {Proceedings of the 23rd International Conference on Software Engineering, 2001. {ICSE} 2001},
	author = {{McUmber}, {W.E.} and Cheng, B. H C},
	month = may,
	year = {2001},
	keywords = {abstract representations, Analytical models, Automatic testing, Embedded system, embedded systems, Formal languages, formal semantics, formal specification, formal specifications, homomorphic mapping, industrial case study, meta models, model checking, Object oriented modeling, object-oriented methods, object-oriented modeling, Performance analysis, Performance evaluation, Prototypes, rigorous automated analysis, specification languages, specifications, {UML}, unified modeling language, Writing},
	pages = {433--442}
}

@inproceedings{bonfe_design_2003,
	title = {Design and verification of industrial logic controllers with {UML} and statecharts},
	volume = {2},
	doi = {10.1109/CCA.2003.1223152},
	abstract = {The paper describes a methodological framework that aims to apply formal design and verification techniques to the domain of logic control and supervision for manufacturing systems. The methodology is based on an object-oriented approach, supported by a syntactical and semantical adaptation of the semi-formal software specification languages {UML} and statecharts. The modeling languages have been subsequently formalized, according to a semantics that take into account the concepts described in the {IEC} 61131-3 standard for industrial controllers programming, in order to prove correctness properties expressed in the temporal logic {CTL.} The verification process is performed by means of the model-checking tool {SMV.}},
	booktitle = {Proceedings of 2003 {IEEE} Conference on Control Applications, 2003. {CCA} 2003},
	author = {Bonfe, M. and Fantuzzi, C.},
	month = jun,
	year = {2003},
	keywords = {correctness properties, {CTL} temporal logic, formal design, Formal languages, formal verification, {IEC} 61131-3 standard, industrial control, industrial controllers programming, industrial logic controller, manufacturing systems, modeling languages, object-oriented approach, object-oriented methods, {SMV} model checking tool, specification languages, statecharts semiformal software, supervision, temporal logic, {UML}, verification techniques},
	pages = {1029 -- 1034 vol.2},
}

@inproceedings{dong_model_2001,
	title = {Model checking {UML} statecharts},
	doi = {10.1109/APSEC.2001.991503},
	abstract = {Unified Modeling Language ({UML)} has been widely used in software development. Verifying if an {UML} model meets the required properties has become a key issue. Model checking is an important technology of automatic formal verification to ensure the correctness of design specifications. An approach of model checking {UML} statecharts is given in this paper At first, the brief syntax and semantics of {UML} statecharts are described. Then, the way of how {UML} statecharts is structurally expressed by extended hierarchical automaton and the labeled transition system are defined. The correctness of operational semantics of {UML} statecharts can be ensured through finding the maximal non-conflict transition set. For the system with infinite runs, the operational semantics can be mapped to a Buchi automaton and linear temporal logic properties of the system can be verified based on the automata theory of model checking. The paper also presents the method of verifying complex system consist of multiple objects modeled by statecharts and collaboration diagram.},
	booktitle = {Software Engineering Conference, 2001. {APSEC} 2001. Eighth Asia-Pacific},
	author = {Dong, Wei and Wang, Ji and Qi, Xuan and Qi, Zhi-Chang},
	month = dec,
	year = {2001},
	keywords = {automata theory, automatic formal verification, Buchi automaton, design specifications, extended hierarchical automaton, labeled transition system, linear temporal logic properties, model checking, program verification, specification languages, temporal logic, {UML} statecharts, unified modeling language},
	pages = {363 -- 370},
}

@inproceedings{frey_re-engineering_2004,
	title = {A re-engineering approach for {PLC} programs using finite automata and {UML}},
	doi = {10.1109/IRI.2004.1431431},
	abstract = {Today there is a standard for the implementation of programs on programmable logic controllers ({PLCs).} Furthermore there are methods for the formal development of these programs. The standard allows the interchange of algorithms (e.g. if a new hardware should be used) and the formal methods allow the rigid prove of functionality especially needed in safety critical applications (e.g. using model checking). However, there is a lot of existing {PLC} programs that have been implemented in proprietary languages before a standard existed and even today formal methods are scarcely used. This paper outlines an approach to formalize existing {PLC} programs implemented in the widely used {STEP5} language. It consists of two steps: first the modular structure of the program is transferred to a {UML} model and in a second step the algorithms contained in the modules are converted to finite automata. This conversion uses an abstraction method to avoid large automata.},
	booktitle = {Proceedings of the 2004 {IEEE} International Conference on Information Reuse and Integration, 2004. {IRI} 2004},
	author = {Frey, G. and Younis, {M.B.}},
	month = nov,
	year = {2004},
	keywords = {abstraction method, Automata, Automatic control, Automation, Control systems, finite automata, formal method, Hardware, {IEC} standards, microprogramming, Programmable control, programmable controllers, programmable logic controllers, Reverse engineering, Safety, safety critical application, software reusability, {STEP5} language, systems re-engineering, {UML} model, unified modeling language},
	pages = {24 --29},
}

@book{ray_automated_2007,
	address = {Chennai},
	title = {Automated translation of {MATLAB} {Simulink/Stateflow} models to an Intermediate format in {HyVisual}},
	publisher = {Chennai Mathematical Institute},
	author = {Ray, Rajarshi},
	year = {2007},
	keywords = {simulink; matlab},
}


@inproceedings{li_stateflow_2011,
	title = {Stateflow to Extended Finite Automata Translation},
	doi = {10.1109/COMPSACW.2011.11},
	abstract = {State flow, a graphical interface tool for Matlab, is a common choice for design of event-driven software and systems. In order for their offline analysis (testing/verification) or online analysis (monitoring), the State flow model must be converted to a form that is amenable to formal analysis. In this paper, we present a systematic method, which translates State flow into a formal model, called {Input/Output} Extended Finite Automata ({I/O-EFA).} The translation method treats each state of the State flow model as an atomic module, and applies composition/refinement rules for each feature (such as state-hierarchy, local events) recursively to obtain the entire model. The size of the translated model is linear in the size of the State flow chart. Our translation method is sound and complete in the sense that it preserves the discrete behaviors as observed at the sample times. Further, the translation method has been implemented in a Matlab tool, which outputs the translated {I/O-EFA} model that can itself be simulated in Matlab.},
	booktitle = {Computer Software and Applications Conference Workshops ({COMPSACW)}, 2011 {IEEE} 35th Annual},
	author = {Li, Meng and Kumar, R.},
	month = jul,
	year = {2011},
	keywords = {atomic module, event-driven software, finite automata, formal analysis, graphical interface tool, graphical user interfaces, input-output extended finite automata translation method, mathematics computing, Matlab tool, offline analysis, online analysis, stateflow model, systematic method},
	pages = {1 --6},
}

